#!/usr/bin/env bash
# BeamOS generation script
# Helper script that runs in a Raspbian chroot to create the BeamOS distro
# Written by Axel Soll <axel@soll.xyz>
# GPL V3
########
set -x
set -e

export LC_ALL=C

source /common.sh

enable_i2c() {
  # install i2c-tools to e.g. scan the i2c bus using the cli
  apt-install i2c-tools

  # # enable i2c bus using entirely raspi-config (doesn't seem to work)
  # # See https://github.com/RPi-Distro/raspi-config/blob/master/raspi-config#L899
  # raspi-config nonint do_i2c 1

  # manual raspi-config copy-pasta, doesn't seem to have proper env in the chroot to use raspi-config
  set_config_var dtparam=i2c_arm on
  BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
  if ! [ -e $BLACKLIST ]; then
    touch $BLACKLIST
  fi
  sed $BLACKLIST -i -e "s/^\(blacklist[[:space:]]*i2c[-_]bcm2708\)/#\1/"
  sed /etc/modules -i -e "s/^#[[:space:]]*\(i2c[-_]dev\)/\1/"
  if ! grep -q "^i2c[-_]dev" /etc/modules; then
    printf "i2c-dev\n" >> /etc/modules
  fi
  # dtparam i2c_arm=on # fail - only used for enabling i2c at runtime?
  modprobe i2c-dev
  # end of manual copy pasta

  # Set the i2c_arm baudrate
  set_config_var dtparam=i2c_arm_baudrate $BEAMOS_I2C_BAUDRATE
}

enable_hw_serial() {
  # Enable the hardware serial port uart 1
  # Do NOT enable login shell over serial
  # # See https://github.com/RPi-Distro/raspi-config/blob/master/raspi-config#L957
  # sudo raspi-config nonint do_serial 2

  # Same here as for the i2c - copy pasta
  CMDLINE=/boot/cmdline.txt
  sed -i $CMDLINE -e "s/console=ttyAMA0,[0-9]\+ //"
  sed -i $CMDLINE -e "s/console=serial0,[0-9]\+ //"
  set_config_var enable_uart 1
}

add_mrb3() {
  echo "--- Installing Python3"
  # additional python3 packages (uncomment when needed +20sec)
  apt-get -y install python3 python3-venv python3-dev
  # create mrb virtual environments
  # TODO create mrb2 and mrb3 (python 2 and 3 versions)
  sudo -u pi python3.7 -m venv /home/pi/mrb3
}

OPRINT=/home/pi/oprint/bin

pip_install() {
  PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip --disable-pip-version-check install $@
}

pip_install_dev_or_rm() {
  # If in DEV mode, install with develop options and keep the repo
  # If not, install normally and remove the repo
  if [ "$BEAMOS_DEV" == "yes" ]; then
    mkdir -p /home/pi/sources
    mv $@ /home/pi/sources/
    for package in $(basename -a $@); do
      pip_install -e /home/pi/sources/$@
    done
  else
    pip_install $@
    rm -rf $@
  fi
}

apt-install() {
  apt-get install -y $@
}

pushd /home/pi

  if [ "$BEAMOS_INCLUDE_MRBEAMPLUGIN" == "yes" ]
  then
    # Only the MrBeamPlugin requires OpenCV
    if [ "BEAMOS_COMPILE_OPENCV" == "yes" ]; then
      echo "Pulling $BEAMOS_OPENCV_VERSION"
      echo "Compiling OpenCV v.$BEAMOS_OPENCV_VERSION for python $PYTHON_VERSION -- This can take around an hour"
      # Following the pyimagesearch tutorial
      # https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/
      DEV_LIBS_OPENCV="libjpeg-dev libtiff5-dev libjasper-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libatlas-base-dev gfortran libhdf5-dev libhdf5-serial-dev"
      apt-install $DEV_LIBS_OPENCV libhdf5-103
      # TODO finish up
      sudo apt -y remove $DEV_LIBS_OPENCV # save space

    else
      echo "--- Installing OpenCV from pip wheels ~ 10min because installs gtk"
      # After this operation, 1085 MB of additional disk space will be used.
      apt-install python-opencv
      # link the global library to the oprint environment
      ln -s /usr/lib/python2.7/dist-packages/cv2.arm-linux-gnueabihf.so /home/pi/oprint/lib/python2.7/cv2.so
      # Headless install (which fails)
      # PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip install opencv-python-headless
      # Install the opencv wheel available for raspberry (also fails)
      # PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/pip install opencv-python #opencv-contrib-python-nonfree-headless
    fi
    echo "--- Installing MrBeamPlugin"
    # Library dependencies for PIL
    apt-install libxml2  libjpeg9
    # TODO rm install of numpy here
    # picamera needs to check /proc/cpuinfo at install time to figure out which model it's used with.
    cp /filesystem/picamera/cpuinfo.pi3bp /proc/cpuinfo

    gitclone BEAMOS_MRBEAMPLUGIN_REPO OctoPrint-MrBeam
    pip_install_dev_or_rm ./OctoPrint-MrBeam

    rm /proc/cpuinfo
  fi
  if [ "$BEAMOS_INCLUDE_IOBEAM" == "yes" ]
  then
    echo "--- Installing IOBEAM"
    # enable the i2c bus before first boot + i2c tools.
    # Could also be enabled with raspi-config on 1st boot.
    # See init.d/beamos_first_boot
    enable_i2c
    # Enable the HW serial before the first boot.
    # Otherwise the PCF shield will shut down the device before it
    # has a chance to enable it using raspi-config
    enable_hw_serial
    # Create a python2 venv because python2-pip might not be an available package
    BEAMOS_IOBEAM_VENV=/usr/local/iobeam/venv
    mkdir -p $(dirname $BEAMOS_IOBEAM_VENV)
    python3 -m virtualenv -p python2 $BEAMOS_IOBEAM_VENV
    # numpy and mrb_hw_info AND requests are not listed as a dependency in iobeam or mrb_hw_info, install them manually before iobeam
    # They are installed on the root level because they use root files from time to time. See iobeam#69 (nice)
    # iobeam is cloned as a submodule to /filesystem before running the script
    PIP_DEFAULT_TIMEOUT=60 $BEAMOS_IOBEAM_VENV/bin/python -m pip install requests /filesystem/repos/mrb_hw_info numpy /filesystem/repos/iobeam
    # Link the executables to have iobeam(cli) in the $PATH
    ln -s $BEAMOS_IOBEAM_VENV/bin/iobeam /usr/bin/
    ln -s $BEAMOS_IOBEAM_VENV/bin/iobeamcli /usr/bin/
    # Copy files for the systemd service. Those are not meant to be installable with pip.
    unpack /filesystem/iobeam/root / root
    # Enable the iobeam.service unit that was previously copied
    systemctl_if_exists enable iobeam.service
  fi
  if [ "$BEAMOS_INCLUDE_NETCONNECTD" == "yes" ]; then
    # Install the Netconnectd daemon
    apt-install hostapd dnsmasq logrotate rfkill
    gitclone BEAMOS_NETCONNECTD_REPO netconnectd
    # Create venv
    python3 -m virtualenv -p python3 $BEAMOS_NETCONNECTD_VENV
    sudo $BEAMOS_NETCONNECTD_VENV/bin/python -m pip install $BEAMOS_NETCONNECTD_WIFI_ARCHIVE ./netconnectd
    pushd netconnectd
      mkdir -p /etc/netconnectd.conf.d/{hostapd,dnsmasq} /etc/network/interfaces.d/
      cp extras/netconnectd.yaml /etc/netconnectd.conf.d/
      cp extras/netconnectd.service /etc/systemd/system/
      cp extras/eth0 /etc/network/interfaces.d/
    popd
    # Link the executables to have netconnectd(cli) in the $PATH
    ln -s $BEAMOS_NETCONNECTD_VENV/bin/netconnectd /usr/bin/
    ln -s $BEAMOS_NETCONNECTD_VENV/bin/netconnectcli /usr/bin/
    # update-rc.d -f hostapd remove
    # update-rc.d -f dnsmasq remove
    # update-rc.d netconnectd defaults 98
    systemctl enable netconnectd.service
    systemctl disable dnsmasq.service
    systemctl disable wpa_supplicant
    # Install the OctoPrint plugin for communicating with Netconnectd
    gitclone BEAMOS_NETCONNECTD_PLUGIN_REPO OctoPrint-Netconnectd
    pip_install_dev_or_rm ./OctoPrint-Netconnectd
  fi
  if [ "$BEAMOS_INCLUDE_MOUNTMANAGER" == "yes" ]
  then
    echo "--- Installing mount_manager"
    apt-install gnupg
    unpack /filesystem/mount_manager/root / root
    unpack /filesystem/mount_manager/home /home/ pi
    echo 'ACTION=="add",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",TAG+="systemd",ENV{SYSTEMD_WANTS}="usb_mount_manager_add.service"' >> /lib/udev/rules.d/00-mount_manager.rules
    echo 'ACTION=="remove",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",RUN+="/bin/systemctl start --no-block usb_mount_manager_remove.service"' >> /lib/udev/rules.d/00-mount_manager.rules
    # Disable the udev rules for first boot and will be enabled again by the beamos_first_boot
    sudo ln -s /dev/null /etc/udev/rules.d/00-mount_manager.rules
    # mount manager was cloned as a submodule to /filesystem before running the script
    mv /filesystem/repos/mount_manager/mount_manager /usr/bin/
    chmod o+x /usr/bin/mount_manager
    chown root:root /usr/bin/mount_manager
    rm -rf usb_mount_manager
    # Add gpg public key under the pi user
    mkdir -p /home/pi/.config
    gpg -u "${BASE_USER}" --homedir /home/pi/.gnupg --import /usr/share/mount_manager/pubkey.asc
    # The daemon gpg-agent can make the system hang when umouting the chroot image
    gpgconf --kill gpg-agent
    # sudo -u "${BASE_USER}" gpg --import /usr/share/mount_manager/pubkey.asc
  fi
  if [ "$BEAMOS_INCLUDE_FINDMYMRBEAM" == "yes" ]
  then
    echo "--- Installing Find my MrBeam ..."
    pip_install $BEAMOS_FINDMYMRBEAM_ARCHIVE
  fi
  if [ "$BEAMOS_INCLUDE_MRBEAMLED" == "yes" ]
  then
    echo "--- Installing MrBeam LED server ..."
    # # Add globaly available pip
    # apt-install python3-pip
    # Install in a separate venv
    LED_VENV=/usr/local/mrbeam_ledstrips/venv
    python3 -m virtualenv -p python3 $LED_VENV
    $LED_VENV/bin/pip install $BEAMOS_RPI_WS281X_ARCHIVE $BEAMOS_MRBEAMLED_ARCHIVE
    # Link the executables to have mrbeam_ledstrips(_cli) in the $PATH
    ln -s $LED_VENV/bin/mrbeam_ledstrips /usr/bin/
    ln -s $LED_VENV/bin/mrbeam_ledstrips_cli /usr/bin/
    # And some short names too
    ln -s $LED_VENV/bin/mrbeam_ledstrips /usr/bin/leds
    ln -s $LED_VENV/bin/mrbeam_ledstrips_cli /usr/bin/leds_cli
    unpack /filesystem/mrbeam_ledstrips/root / root
    # Enable the mrbeam_ledstrips.service unit that was previously copied
    systemctl_if_exists enable mrbeam_ledstrips.service
  fi
  if [ "$BEAMOS_INCLUDE_SSH" == "yes" ]
  then
    # Redundant as octopi already enables sshd, but keep it to make sure.
    touch /boot/ssh
    # Add known_hosts for auto login with the mr beam credentials
    unpack /filesystem/ssh /home/pi/ pi
    if [ "$BEAMOS_DEV" != "yes" ]; then
      # remove user password login
      passwd -d pi
    fi
  else
    rm /boot/ssh || echo "Auto sshd already disabled - /boot/ssh is not a file"
  fi
  if [ "$BEAMOS_DEV" == "yes" ]; then
    apt-install vim curl pkg-config figlet
  fi
popd

# Upack the remainder of the files.
unpack /filesystem/home /home/ pi
unpack /filesystem/root / root

# store beamos commit used to build this image
# (will be the same as the octopi commit version
echo "$BEAMOS_COMMIT" > /etc/beamos_commit

# Set the date of the image creation.
[ "$BEAMOS_DEV" == "yes" ] && VERSION="DEV" || VERSION="PROD"
sed -i "s/octopi=/\0$VERSION $(date)/" /etc/mrbeam


#####################################################################
### setup services

# Enable systemd units
update-rc.d beamos_first_boot defaults

### Netconnectd

# if [ "$BEAMOS_INCLUDE_NETCONNECTD" == "yes" ]
# then
#   systemctl_if_exists enable netconnectd.service
# else
  # let's remove the configs for system services we don't need
  # rm /etc/systemd/system/netconnectd.service
# fi
