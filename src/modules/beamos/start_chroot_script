#!/usr/bin/env bash
# BeamOS generation script
# Helper script that runs in a Raspbian chroot to create the BeamOS distro
# Written by Axel Soll <axel@soll.xyz>
# GPL V3
########
set -x
set -e

export LC_ALL=C

source /common.sh

enable_i2c() {
  # install i2c-tools to e.g. scan the i2c bus using the cli
  apt-install i2c-tools

  # # enable i2c bus using entirely raspi-config (doesn't seem to work)
  # # See https://github.com/RPi-Distro/raspi-config/blob/master/raspi-config#L899
  # raspi-config nonint do_i2c 1

  # manual raspi-config copy-pasta, doesn't seem to have proper env in the chroot to use raspi-config
  set_config_var dtparam=i2c_arm on
  BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
  if ! [ -e $BLACKLIST ]; then
    touch $BLACKLIST
  fi
  sed $BLACKLIST -i -e "s/^\(blacklist[[:space:]]*i2c[-_]bcm2708\)/#\1/"
  sed /etc/modules -i -e "s/^#[[:space:]]*\(i2c[-_]dev\)/\1/"
  if ! grep -q "^i2c[-_]dev" /etc/modules; then
    printf "i2c-dev\n" >> /etc/modules
  fi
  # dtparam i2c_arm=on # fail - only used for enabling i2c at runtime?
  # modprobe i2c-dev # load i2c-dev module at runtime (and enable it? Is this required if rebooting?)
  # end of manual copy pasta

  # Set the i2c_arm baudrate
  set_config_var dtparam=i2c_arm_baudrate $BEAMOS_I2C_BAUDRATE
}

enable_hw_serial() {
  # Enable the hardware serial port uart 1
  # Do NOT enable login shell over serial
  # # See https://github.com/RPi-Distro/raspi-config/blob/master/raspi-config#L957
  # sudo raspi-config nonint do_serial 2

  # Same here as for the i2c - copy pasta
  CMDLINE=/boot/cmdline.txt
  sed -i $CMDLINE -e "s/console=ttyAMA0,[0-9]\+ //"
  sed -i $CMDLINE -e "s/console=serial0,[0-9]\+ //"
  set_config_var enable_uart 1
  # Enable bluetooth serial, this solves connection issues with GRBL,
  # but I'm not quite sure why...
  # TODO : Test with straight OctoPi
  echo "dtoverlay=pi3-miniuart-bt" >> /boot/config.txt
}

add_mrb3() {
  echo "--- Installing Python3"
  # additional python3 packages (uncomment when needed +20sec)
  apt-get -y install python3 python3-venv python3-dev
  # create mrb virtual environments
  # TODO create mrb2 and mrb3 (python 2 and 3 versions)
  sudo -u pi python3.7 -m venv /home/pi/mrb3
}

OPRINT=/home/pi/oprint/bin

pip_install() {
  PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip --disable-pip-version-check install $@
}

pip_install_dev_or_rm() {
  # If in DEV mode, install with develop options and keep the repo
  # If not, install normally and remove the repo
  if [ "$BEAMOS_DEV" = "yes" ]; then
    sudo -u pi mkdir -p /home/pi/sources
    mv $@ /home/pi/sources/
    for package in $(basename -a $@); do
      pip_install -e /home/pi/sources/$package
    done
  else
    pip_install $@
    rm -rf $@
  fi
}

apt-install() {
  # apt-get install without getting stuck on [Y/n] prompt
  apt-get install -y $@
}

set_yaml() {
  # Set values in a path in config.yaml
  # yq -i eval "$@" /home/pi/.octoprint/config.yaml
  sudo -u pi yq -i eval "$@" /home/pi/.octoprint/config.yaml
}

get_hash_remote() {
  # output hash of latest commit from a branch remotely
  # get_hash <url> <branch>
  git ls-remote $1 $2 | head -n 1 | awk '{print $1}'
}

get_hash_local() {
  # Get the commit hash of HEAD for the git repo in current work dir (cwd).
  git rev-parse HEAD
}

get_hash_submodule() {
  # Will attempt to get the commit hash for a repo in the /filesystem/repos/ dir.
  # If a file in the repo is named `current_commit_hash`, then the function reads from that file.
  # If it doesn't, then uses the git tool to get the actual hash.
  # The reason for the hack is that the git submodules wouldn't work reliably.
  # To circumvent the problem, the host device writes the commit hash into
  # the `current_commit_hash` file in every repo befoore starting the chroot
  # - and here we read these files.

  # NOTE: copy pasta of get_branch_submodule()
  # a bit hacky... doesn't seem to simply work with get_hash_local
  repo_loc=/filesystem/repos/$1
  branch_file=$repo_loc/current_commit_hash
  if [ -f "$branch_file" ]; then
    # Uses files generated in build.yml!!
    # GitHub is broken, so I am writing the commit hashes into a file,
    # Then I read the file content here
    cat "$branch_file"
  else
    # git submodule status $repo_loc | cut -d ' ' -f2
    pushd $repo_loc 1>&2
      git rev-parse HEAD
    popd 1>&2
  fi
}

get_branch_submodule() {
  # Will attempt to get the branch for a repo in the /filesystem/repos/ dir.
  # If a file in the repo is named `current_branch`, then the function reads from that file.
  # If it doesn't, then uses the git tool to get the actual branch.
  # The reason for the hack is that the git submodules wouldn't work reliably.
  # To circumvent the problem, the host device writes the git branch into
  # the `current_branch` file in every repo befoore starting the chroot
  # - and here we read these files.

  # NOTE: copy pasta of get_hash_submodule()
  # a bit hacky... doesn't seem to simply work with get_hash_local
  repo_loc=/filesystem/repos/$1
  branch_file=$repo_loc/current_branch
  if [ -f "$branch_file" ]; then
    # Uses files generated in build.yml!!
    cat "$branch_file"
  else
    # Go to the repo dir and get the branch using `git`
    # git submodule status $repo_loc | sed 's/^.*(\(.*\))/\1/' | cut -d '/' -f3-
    pushd $repo_loc 1>&2
      git branch | tail -n 1
    popd 1>&2
  fi
}

set_plugin_update_conf() {
  # Shorthand to setup the config.yaml for the softwareupdate plugin
  # Examples:
  #   set_plugin_update_conf iobeam branch mrbeam2-stable
  #   set_plugin_update_conf iobeam url https://github.com/mrbeam/iobeam.git
  module_id=$1
  key=$2
  val=$3
  set_yaml ".plugins.softwareupdate.checks.$module_id.$key = \"$val\""
}

set_plugin_update_conf_submodule() {
  # Update the config.yaml with the branch and commit hashes for specific packages
  # Use the name of a git repo in /filesystem/repos/<submodule> to get
  # the hash & branch names from
  # Example:
  #   set_plugin_update_conf_submodule iobeam iobeam
  #   set_plugin_update_conf_submodule mrb_check mrb_check
  module_id=$1
  submodule=$2
  set_plugin_update_conf $module_id branch $(get_branch_submodule $submodule)
  set_plugin_update_conf $module_id current $(get_hash_submodule $submodule)
}

set_plugin_update_conf_remote() {
  # Update the config.yaml with the branch and commit hashes for specific packages
  # Uses the url for a remote git repo to get the lastest commit hash for a specific branch
  # It then updates the config to reflect the branch and the commit hash used.
  # Example:
  #   set_plugin_update_conf_remote iobeam mrbeam2-stable https://github.com/mrbeam/iobeam.git
  module_id=$1
  url=$2
  branch=$3
  set_plugin_update_conf $module_id branch $branch
  set_plugin_update_conf $module_id current $(get_hash_remote $url $branch)
}

# Unpack the regular files
unpack /filesystem/home /home/ pi
unpack /filesystem/root / root

# Install a more feature-fool alternative to nano : micro
curl https://getmic.ro | bash
mv ./micro /usr/bin/

# Install a toml cli tool and neofetch presentation script
# Can be used to edit / query /etc/mrbeam `crudini --get /etc/mrbeam "" hostname`
apt-install python3-pip neofetch
python3 -m pip install crudini

mkdir -p /root/.ssh
# Add ssh creds to prevent errors when pulling from bitbucket
ssh-keyscan -t rsa bitbucket.org >> /root/.ssh/known_hosts
# Enable ssh identification for private packages in bitbucket.org
if [ -n "$EXTRA_SSH_KEY" ]; then
  # EXTRA_SSH_KEY is not written in any config for security reasons.
  # Use it when invoking BeamOS : `EXTRA_SSH_KEY="some_key" ./build_dist mrbeam`
  echo "$EXTRA_SSH_KEY" > /root/.ssh/id_rsa
  chmod 0600 /root/.ssh/id_rsa
fi

pushd /home/pi
  # Add .local/bin to PATH and add link to octoprint there
  sudo -u pi mkdir -p .local/bin
  sudo -u pi ln -s /home/pi/oprint/bin/octoprint .local/bin/
  # Add symlink to preserve legacy compatibility for mrbtools
  sudo -u pi ln -s oprint/lib/python2.7/site-packages

  if [ "$BEAMOS_INCLUDE_CHECK" = "yes" ]
  then
    # Create a python2 venv because python2-pip might not be an available package
    BEAMOS_CHECK_VENV=/usr/local/mrb_check/venv
    mkdir -p $(dirname $BEAMOS_CHECK_VENV)
    python3 -m virtualenv -p python2 $BEAMOS_CHECK_VENV
    # OctoPrint has no need to update mrb_check -> No need to add to config.yaml
    PIP_DEFAULT_TIMEOUT=60 $BEAMOS_CHECK_VENV/bin/python -m pip install /filesystem/repos/mrb_check

    ln -s $BEAMOS_CHECK_VENV/bin/mrb_check /usr/bin/
    unpack /filesystem/mrb_check/root / root
    # Remove the auto start of mrb_check -> Only trigger mrb_check pr usb stick.
    echo "DEVELOP - This file prevents mrb_check to run on second boot." >> /etc/mrb_check_success

    # The OctoPrint-Camera plugin is only required for the assembly right now
    # NOTE Should be made an independent addition when it's ready for PROD
    if [ "$BEAMOS_INCLUDE_CAMERA" = "yes" ]
    then
      echo "--- Installing OctoPrint-Camera ..."
      # picamera (OctoPrint-MrBeam dependency) needs to check /proc/cpuinfo at install time to figure out which model it's used with.
      cp /filesystem/picamera/cpuinfo.pi3bp /proc/cpuinfo
      gitclone BEAMOS_CAMERA_REPO OctoPrint-Camera
      pip_install_dev_or_rm ./OctoPrint-Camera
      set_plugin_update_conf_remote camera $BEAMOS_CAMERA_REPO_SHIP $BEAMOS_CAMERA_REPO_BRANCH
      rm /proc/cpuinfo
      # set_yaml '.plugins._disabled = [ "camera" ]'
    fi
    # rlpr allows to print the test results at the assembly facility
    # rlpr : A utility for lpd printing without using /etc/printcap
    apt-install rlpr
  fi

  if [ "$BEAMOS_INCLUDE_MRBEAMPLUGIN" = "yes" ]
  then
    # Only the MrBeamPlugin requires OpenCV
    # TODO Optimise
    if [ "BEAMOS_COMPILE_OPENCV" = "yes" ]; then
      # This part would build the OpenCV library binaries and link them in
      # order to use them in out python2 environment.
      #
      # NOTE: It is recommended to isolate all the Camera processing into a separate
      # plugin (OctoPrint-Camera) which could easily be upgraded to Python3. In Python3
      # the pypi package for OpenCV is available.
      # caviat: It requires all plugins to be migrated to python3 too.
      echo "Pulling $BEAMOS_OPENCV_VERSION"
      echo "Compiling OpenCV v.$BEAMOS_OPENCV_VERSION for python $PYTHON_VERSION -- This can take around an hour"
      # Following the pyimagesearch tutorial
      # https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/
      DEV_LIBS_OPENCV="libjpeg-dev libtiff5-dev libjasper-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libatlas-base-dev gfortran libhdf5-dev libhdf5-serial-dev"
      apt-install $DEV_LIBS_OPENCV libhdf5-103
      # TODO finish up
      sudo apt -y remove $DEV_LIBS_OPENCV # save space

    else
      # Installs the complete OpenCV library including the gtk environment.
      # This step takes a looot of space but is required to get picamera on python2 easily
      # as you don't have to configure the OpenCV build and link everything.
      echo "--- Installing OpenCV from pip wheels ~ 10min because installs gtk"
      # After this operation, 1085 MB of additional disk space will be used.
      apt-install python-opencv
      # link the global library to the oprint environment
      ln -s /usr/lib/python2.7/dist-packages/cv2.arm-linux-gnueabihf.so /home/pi/oprint/lib/python2.7/cv2.so
      # Headless install (which fails)
      # PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip install opencv-python-headless
      # Install the opencv wheel available for raspberry (also fails)
      # PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/pip install opencv-python #opencv-contrib-python-nonfree-headless
    fi
    echo "--- Installing MrBeamPlugin"
    # Library dependencies for lxml and PIL
    # See https://lxml.de/installation.html
    apt-install libxml2 libxslt1.1 libxslt-dev libjpeg9
    # picamera (OctoPrint-MrBeam dependency) needs to check /proc/cpuinfo at install time to figure out which model it's used with.
    cp /filesystem/picamera/cpuinfo.pi3bp /proc/cpuinfo

    gitclone BEAMOS_MRBEAMPLUGIN_REPO OctoPrint-MrBeam
    pip_install_dev_or_rm ./OctoPrint-MrBeam
    set_plugin_update_conf_remote mrbeam $BEAMOS_MRBEAMPLUGIN_REPO_SHIP $BEAMOS_MRBEAMPLUGIN_REPO_BRANCH
    rm /proc/cpuinfo

    # Install MrBeamDocs
    pip_install $BEAMOS_MRBEAMPLUGIN_DOCS_ARCHIVE
    set_plugin_update_conf_remote mrbeamdoc $BEAMOS_MRBEAMPLUGIN_DOCS_REPO_SHIP $BEAMOS_MRBEAMPLUGIN_DOCS_REPO_BRANCH
  fi
  if [ "$BEAMOS_INCLUDE_IOBEAM" = "yes" ]
  then
    echo "--- Installing IOBEAM"
    # enable the i2c bus before first boot + i2c tools.
    # Could also be enabled with raspi-config on 1st boot.
    # See init.d/beamos_first_boot
    enable_i2c
    # Enable the HW serial before the first boot.
    # Otherwise the PCF shield will shut down the device before it
    # has a chance to enable it using raspi-config
    enable_hw_serial
    # Create a python2 venv because python2-pip might not be an available package
    BEAMOS_IOBEAM_VENV=/usr/local/iobeam/venv
    mkdir -p $(dirname $BEAMOS_IOBEAM_VENV)
    python3 -m virtualenv -p python2 $BEAMOS_IOBEAM_VENV
    # change pip commands to match the new virtualenv
    # Do this BEFORE INSTALLING as - in the develop version,
    # it will move the source folder, in which case we couldn't access it.
    # Cannot access private mrb_hw_info repo unless build server has authorised key set up
    # git rev-parse HEAD returns the commit hash of current git project
    set_plugin_update_conf_submodule iobeam      iobeam
    set_plugin_update_conf_submodule mrb_hw_info mrb_hw_info
    set_plugin_update_conf iobeam      pip_command "sudo $BEAMOS_IOBEAM_VENV/bin/pip"
    set_plugin_update_conf mrb_hw_info pip_command "sudo $BEAMOS_IOBEAM_VENV/bin/pip"
    # numpy and mrb_hw_info AND requests are not listed as a dependency in iobeam or mrb_hw_info, install them manually before iobeam
    # They are installed on the root level because they use root files from time to time. See iobeam#69 (nice)
    # iobeam is cloned as a submodule to /filesystem before running the script
    if [ "$BEAMOS_DEV" = "yes" ]; then
      PIP_DEFAULT_TIMEOUT=60 $BEAMOS_IOBEAM_VENV/bin/python -m pip install requests numpy
      mv /filesystem/repos/mrb_hw_info /filesystem/repos/iobeam sources/
      PIP_DEFAULT_TIMEOUT=60 $BEAMOS_IOBEAM_VENV/bin/python -m pip install -e sources/mrb_hw_info sources/iobeam
    else
      PIP_DEFAULT_TIMEOUT=60 $BEAMOS_IOBEAM_VENV/bin/python -m pip install requests /filesystem/repos/mrb_hw_info numpy /filesystem/repos/iobeam
    fi

    # Link the executables to have iobeam(cli) in the $PATH
    ln -s $BEAMOS_IOBEAM_VENV/bin/iobeam    /usr/bin/
    ln -s $BEAMOS_IOBEAM_VENV/bin/iobeamcli /usr/bin/
    # Copy files for the systemd service. Those are not meant to be installable with pip.
    unpack /filesystem/iobeam/root / root
    # Enable the iobeam.service unit that was previously copied
    systemctl_if_exists enable iobeam.service

    # Add AVRDUDE : utility to flash GRBL on the Shield microcontroller.
    apt-install avrdude
    # Install the Shield "Auto Flasher" wrapper for avrdude.
    AVR_DIR=$(dirname $(which avrdude))
    mv $(which avrdude) $AVR_DIR/avrdude-original
    wget https://raw.githubusercontent.com/mrbeam/shield_flasher/master/avrdude-autoreset -O $AVR_DIR/avrdude-autoreset
    chmod +x $AVR_DIR/avrdude-autoreset
    wget https://raw.githubusercontent.com/mrbeam/shield_flasher/master/autoreset -O $AVR_DIR/autoreset
    chmod +x $AVR_DIR/autoreset
    ln -s $AVR_DIR/avrdude-autoreset $AVR_DIR/avrdude
    chmod +x $AVR_DIR/avrdude-autoreset $AVR_DIR/autoreset
    # TODO Optimise
    # The autoreset script requires smbus... => migrate that responsability to iobeam??
    apt-install python-pip # install python2 -m pip
    python2 -m pip install smbus
  fi
  if [ "$BEAMOS_INCLUDE_NETCONNECTD" = "yes" ]; then
    # Install the Netconnectd daemon
    apt-install hostapd dnsmasq logrotate rfkill
    NETCONNECTD_PROJ=sources/netconnectd
    gitclone BEAMOS_NETCONNECTD_REPO $NETCONNECTD_PROJ
    # Create venv
    python3 -m virtualenv -p python3 $BEAMOS_NETCONNECTD_VENV
    $BEAMOS_NETCONNECTD_VENV/bin/python -m pip install $BEAMOS_NETCONNECTD_WIFI_ARCHIVE $NETCONNECTD_PROJ
    pushd $NETCONNECTD_PROJ
      mkdir -p /etc/netconnectd.conf.d/{hostapd,dnsmasq} /etc/network/interfaces.d/
      cp extras/netconnectd.yaml /etc/netconnectd.conf.d/
      cp extras/netconnectd.service /etc/systemd/system/
      cp extras/eth0 /etc/network/interfaces.d/
    popd
    if [ "$BEAMOS_DEV" == "yes" ]; then
      echo 'EXTRA_OPTS="--debug"' >> /etc/default/netconnectd
    else
      rm -rf $NETCONNECTD_PROJ
    fi
    # Link the executables to have netconnectd(cli) in the $PATH
    ln -s $BEAMOS_NETCONNECTD_VENV/bin/netconnectd /usr/bin/
    ln -s $BEAMOS_NETCONNECTD_VENV/bin/netconnectcli /usr/bin/
    # update-rc.d -f hostapd remove
    # update-rc.d -f dnsmasq remove
    # update-rc.d netconnectd defaults 98
    systemctl enable netconnectd.service
    systemctl disable dnsmasq.service
    systemctl disable wpa_supplicant
    set_plugin_update_conf_remote netconnectd-daemon $BEAMOS_NETCONNECTD_REPO_SHIP $BEAMOS_NETCONNECTD_REPO_BRANCH
    # change pip commands to match the new virtualenv
    set_plugin_update_conf netconnectd-daemon pip_command "sudo $BEAMOS_NETCONNECTD_VENV/bin/pip"

    # Install the OctoPrint plugin for communicating with Netconnectd
    gitclone BEAMOS_NETCONNECTD_PLUGIN_REPO OctoPrint-Netconnectd
    pip_install_dev_or_rm ./OctoPrint-Netconnectd
    set_plugin_update_conf_remote netconnectd $BEAMOS_NETCONNECTD_PLUGIN_REPO_SHIP $BEAMOS_NETCONNECTD_PLUGIN_REPO_BRANCH
  fi
  if [ "$BEAMOS_INCLUDE_MOUNTMANAGER" = "yes" ]
  then
    echo "--- Installing mount_manager"
    apt-install gnupg zip unzip
    unpack /filesystem/mount_manager/root / root
    unpack /filesystem/mount_manager/home /home/ pi
    echo 'ACTION=="add",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",TAG+="systemd",ENV{SYSTEMD_WANTS}="mount_manager_add.service"' >> /lib/udev/rules.d/00-mount_manager.rules
    echo 'ACTION=="remove",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",RUN+="/bin/systemctl start --no-block mount_manager_remove.service"' >> /lib/udev/rules.d/00-mount_manager.rules
    # mount manager was cloned as a submodule to /filesystem before running the script
    mv /filesystem/repos/mount_manager/mount_manager/mount_manager /usr/bin/
    chmod +x /usr/bin/mount_manager
    chown root:root /usr/bin/mount_manager
    # Had to revert to legacy way for time saving.
    gpg --import /usr/share/mount_manager/pubkey.asc
    # # Add gpg public key under the pi user
    # sudo -u pi mkdir -p /home/pi/.config
    # sudo -u pi gpg -u "${BASE_USER}" --homedir /home/pi/.gnupg --import /usr/share/mount_manager/pubkey.asc
    # sudo -u "${BASE_USER}" gpg --import /usr/share/mount_manager/pubkey.asc
    # The daemon gpg-agent can make the system hang when umouting the chroot image
    gpgconf --kill gpg-agent
    systemctl enable mount_manager_add.service
    systemctl enable mount_manager_remove.service
    systemctl enable mount_manager_remove_before_octo.service
    systemctl enable mount_manager_clear.service
  fi
  if [ "$BEAMOS_INCLUDE_FINDMYMRBEAM" = "yes" ]
  then
    echo "--- Installing Find my MrBeam ..."
    pip_install $BEAMOS_FINDMYMRBEAM_ARCHIVE
    set_plugin_update_conf_remote findmymrbeam $BEAMOS_FINDMYMRBEAM_REPO_SHIP $BEAMOS_FINDMYMRBEAM_REPO_BRANCH
  fi
  if [ "$BEAMOS_INCLUDE_MRBEAMLED" = "yes" ]
  then
    echo "--- Installing MrBeam LED server ..."
    # # Add globaly available pip
    # apt-install python3-pip
    # Install in a separate venv
    LED_VENV=/usr/local/mrbeam_ledstrips/venv
    python3 -m virtualenv -p python3 $LED_VENV
    $LED_VENV/bin/pip install $BEAMOS_RPI_WS281X_ARCHIVE $BEAMOS_MRBEAMLED_ARCHIVE
    # Link the executables to have mrbeam_ledstrips(_cli) in the $PATH
    ln -s $LED_VENV/bin/mrbeam_ledstrips /usr/bin/
    ln -s $LED_VENV/bin/mrbeam_ledstrips_cli /usr/bin/
    # And some short names too
    ln -s $LED_VENV/bin/mrbeam_ledstrips /usr/bin/leds
    ln -s $LED_VENV/bin/mrbeam_ledstrips_cli /usr/bin/leds_cli
    unpack /filesystem/mrbeam_ledstrips/root / root
    # Enable the mrbeam_ledstrips.service unit that was previously copied
    systemctl_if_exists enable mrbeam_ledstrips.service
    set_plugin_update_conf_remote mrbeam-ledstrips $BEAMOS_MRBEAMLED_REPO_SHIP $BEAMOS_MRBEAMLED_REPO_BRANCH
    # change pip commands to match the new virtualenv
    set_plugin_update_conf mrbeam-ledstrips pip_command "sudo $LED_VENV/bin/pip"
  fi
  if [ "$BEAMOS_INCLUDE_SSH" = "yes" ]
  then
    # Redundant as octopi already enables sshd, but keep it to make sure.
    touch /boot/ssh
    # Add known_hosts for auto login with the mr beam credentials
    unpack /filesystem/ssh /home/pi/ pi
    if [ "$BEAMOS_DEV" != "yes" ]; then
      # remove user password login
      passwd -d pi
    fi
  else
    rm /boot/ssh || echo "Auto sshd already disabled - /boot/ssh is not a file"
  fi
  if [ "$BEAMOS_DEV" = "yes" ] || [ "$BEAMOS_DEV_CONFIG" = "yes" ]; then
    apt-install vim curl pkg-config figlet
    pushd /home/pi/.octoprint
      # Fuse the dev config file onto the normal config
      yq eval-all -i 'select(fileIndex == 0) * select(fileIndex == 1)' config.yaml config.yaml.dev
      # Add the dev@mr-beam.org user
      cp users-dev.yaml users.yaml
    popd
    # cp .octoprint/config.yaml.dev .octoprint/config.yaml
  else
    # Remove all of the branch: some-branch keys in the config.yaml file
    yq e 'del(.plugins.softwareupdate.checks.*.branch)' -i .octoprint/config.yaml
  fi
popd

# store beamos commit used to build this image
# (will be the same as the octopi commit version
echo "$BEAMOS_COMMIT" > /etc/beamos_commit

# Set the date of the image creation.
[ "$BEAMOS_DEV" = "yes" ] && VERSION="DEV" || VERSION="PROD"

set_field() {
  # Set the field of an INI file
  field=$1
  val=$2
  file=$3
  sed -i "s/^\($field=\).*$/\1$val/" $file

}
set_field octopi $VERSION-$(date +"%Y-%m-%d") /etc/mrbeam
if [ -n "$BEAMOS_DEVICE_MODEL" ]; then
  set_field model $BEAMOS_MODEL /etc/mrbeam
  set_field device_series $BEAMOS_DEVICE_MODEL /etc/mrbeam
  set_field device_type "MrBeam$BEAMOS_DEVICE_MODEL" /etc/mrbeam
fi


#####################################################################
### setup systemd units/services

# Enable systemd units
update-rc.d beamos_first_boot defaults

### Netconnectd

# if [ "$BEAMOS_INCLUDE_NETCONNECTD" = "yes" ]
# then
#   systemctl_if_exists enable netconnectd.service
# else
  # let's remove the configs for system services we don't need
  # rm /etc/systemd/system/netconnectd.service
# fi
