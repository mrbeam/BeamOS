#!/usr/bin/env bash
# BeamOS generation script
# Helper script that runs in a Raspbian chroot to create the BeamOS distro
# Written by Axel Soll <axel@soll.xyz>
# GPL V3
########
set -x
set -e

export LC_ALL=C

source /common.sh

### Script ####

# octopi already updated the image to the latest version, rm'ed bloat packages and updated pip

enable_i2c() {
  # uncomment i2c_arm option
  sed -i 's/^# *\(dtparam=i2c_arm\)/\1/' /boot/config.txt
  # Enable I2C and set I2C baudrate if they are present in config
  if grep "i2c_arm=" /boot/config.txt &>/dev/null; then
    sed -i 's/\(i2c_arm=\)off/\1on/' /boot/config
  fi

  grep "i2c_arm_baudrate" /boot/config.txt || echo "dtparam=i2c_arm_baudrate=$BEAMOS_I2C_BAUDRATE" >> /boot/config.txt
  # Enable UART  AAAAND Bluetooth
  #echo "enable_uart=1" >> /boot/config.txt
}

add_mrb3() {
  echo "--- Installing Python3"
  # additional python3 packages (uncomment when needed +20sec)
  apt-get -y install python3 python3-venv python3-dev
  # create mrb virtual environments
  # TODO create mrb2 and mrb3 (python 2 and 3 versions)
  sudo -u pi python3.7 -m venv /home/pi/mrb3
}

OPRINT=/home/pi/oprint/bin

pushd /home/pi

  if [ "BEAMOS_COMPILE_OPENCV" == "yes" ]; then
    echo "Pulling $BEAMOS_OPENCV_VERSION"
    echo "Compiling OpenCV v.$BEAMOS_OPENCV_VERSION for python $PYTHON_VERSION -- This can take around an hour"
    # Following the pyimagesearch tutorial
    # https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/
    DEV_LIBS_OPENCV="libjpeg-dev libtiff5-dev libjasper-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libatlas-base-dev gfortran libhdf5-dev libhdf5-serial-dev"
    sudo apt -y install $DEV_LIBS_OPENCV libhdf5-103
    # TODO finish up
    sudo apt -y remove $DEV_LIBS_OPENCV # save space
    
  else
    echo "--- Installing OpenCV from pip wheels ~ 10min because installs gtk"
    sudo apt -y --force-yes install python-opencv
    # link the global library to the oprint environment
    ln -s /usr/lib/python2.7/dist-packages/cv2.arm-linux-gnueabihf.so /home/pi/oprint/lib/python2.7/cv2.so
    # Headless install (which fails)
    # PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip install opencv-python-headless
    # Install the opencv wheel available for raspberry
    # PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/pip install opencv-python #opencv-contrib-python-nonfree-headless
  fi
  if [ "$BEAMOS_INCLUDE_MRBEAMPLUGIN" == "yes" ]
  then
    echo "--- Installing MrBeamPlugin"
    # Library dependencies for PIL
    # sudo apt -y install libxml2 libxml2-dev libxslt1-dev libjpeg9 libjpeg9-dev
    # TODO rm install of numpy here
    # pip install raspicam that doesn't check cpu arch stuff
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip install "$BEAMOS_MRBEAMPLUGIN_ARCHIVE"
  fi
  if [ "$BEAMOS_INCLUDE_IOBEAM" == "yes" ]
  then
    echo "--- Installing IOBEAM"
    sudo apt -y install i2c-tools
    enable_i2c
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip install "$BEAMOS_IOBEAM_ARCHIVE"
  fi
  if [ "$BEAMOS_INCLUDE_IOBEAM_3" == "yes" ]
  then
    add_mrb3
    echo "--- Installing IOBEAM for python 3 (venv mrb3)"
    sudo apt -y install i2c-tools
    enable_i2c
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/mrb3/bin/pip install "$BEAMOS_IOBEAM_ARCHIVE"
  fi
  if [ "$BEAMOS_INCLUDE_NETCONNECTD" == "yes" ]; then
    # TODO
    sudo apt-get -y install hostapd dnsmasq logrotate rfkill
    git clone https://github.com/mrbeam/netconnectd netconnectd
    #        OCTOPI_NETCONNECTD_REPO netconnectd

    pushd netconnectd
      sudo python2.7 setup.py install
      sudo python2.7 setup.py install_extras
    popd
    sed -i 's/free: true/free: false/' /etc/netconnectd.yaml
    update-rc.d -f hostapd remove
    update-rc.d -f dnsmasq remove
    update-rc.d netconnectd defaults 98
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi $OPRINT/pip install "$BEAMOS_OCTO_NETCONNECTD_ARCHIVE"
  fi
  [ "$BEAMOS_INCLUDE_GPG" == "yes" ] && sudo apt -y install gnupg
  if [ "$BEAMOS_INCLUDE_MOUNTMANAGER" == "yes" ]
  then
    echo "--- Installing usb_mount_manager"
    unpack /filesystem/mount_manager/ / root
    echo 'ACTION=="add",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",TAG+="systemd",ENV{SYSTEMD_WANTS}="usb_mount_manager_add.service"' >> /lib/udev/rules.d/00-mount_manager.rules
    echo 'ACTION=="remove",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",RUN+="/bin/systemctl start --no-block usb_mount_manager_remove.service"' >> /lib/udev/rules.d/00-mount_manager.rules
    # Disable the udev rules for first boot and will be enabled again by the first_boot_script
    sudo ln -s /dev/null /etc/udev/rules.d/00-mount_manager.rules
    gitclone BEAMOS_MOUNTMANAGER_REPO usb_mount_manager
    sudo mv usb_mount_manager/mount_manager /root/
    sudo chmod o+x /root/mount_manager/mount_manager
    rm -rf usb_mount_manager
    sudo gpg --import /root/pubkey.asc
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/mrb3/bin/pip install "$BEAMOS_IOBEAM_ARCHIVE"
  fi
  if [ "$BEAMOS_INCLUDE_FINDMYMRBEAM" == "yes" ]
  then
    echo "--- Installing Find my MrBeam ..."
    # TODO
  fi
  if [ "$BEAMOS_INCLUDE_SSH" == "yes" ]; then
    sudo apt -y install openssh-server
    # TODO place the .ssh files here
    # TODO remove user password login
  fi
  if [ "$BEAMOS_DEV" == "yes" ]; then
    sudo apt -y install vim curl git pkg-config libssl-dev
    # Adding Rust, personal choice...
  fi
popd

# store beamos commit used to build this image
# (will be the same as the octopi commit version
echo "$BEAMOS_COMMIT" > /etc/beamos_commit

#cleanup
apt-get clean
apt-get autoremove -y

#####################################################################
### setup services

### IObeam

if [ "$BEAMOS_INCLUDE_IOBEAM" == "yes" ]
then
  systemctl_if_exists enable iobeam.service
else
  # let's remove the configs for system services we don't need
  rm /etc/systemd/system/iobeam.service
fi

### Netconnectd

if [ "$BEAMOS_INCLUDE_NETCONNECTD" == "yes" ]
then
  systemctl_if_exists enable netconnectd.service
else
  # let's remove the configs for system services we don't need
  rm /etc/systemd/system/netconnectd.service
fi
