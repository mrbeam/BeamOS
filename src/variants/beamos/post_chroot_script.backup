#!/usr/bin/env bash

###############################################################################################
# NOTES:
#
# - Installation still via git clone and python setup and not via pip because I (Florian) was
#   not able to apply the install_extras stuff to the pip process. Afterwards the repos get
#   removed and the update should be possible via the pip update.
#
###############################################################################################

set -x

source /common.sh

function addGitHashToConfig () {
    name=$1
    hash=$(git rev-parse HEAD)
    sed -i -e "s@<$name>@$hash@g" /home/pi/.octoprint/config.yaml
}

install_chroot_fail_on_error_trap

# unpack filesystem directory
unpack /filesystem/root /
unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root

# enable first_boot_script
update-rc.d first_boot_script defaults

# install necessary dependencies
apt-get -y --force-yes install libxml2-dev libxslt-dev libjpeg8-dev libyaml-dev
apt-get -y --force-yes install hostapd dnsmasq logrotate rfkill python-pip python-smbus i2c-tools
apt-get -y --force-yes install avrdude scons swig vim whois htop iotop zip rlpr sysstat

# install OpenCV dependencies
apt-get -y --force-yes install libtiff5-dev libjasper-dev libpng12-dev libjpeg-dev libavcodec-dev libavformat-dev\
                               libswscale-dev libv4l-dev libgtk2.0-dev libatlas-base-dev gfortran

# upgrade pip, setuptools and install wheel system wide
sudo pip install --upgrade pip
sudo pip install --upgrade setuptools
sudo pip install wheel

# install global stuff
sudo pip install blinker argparse pyserial

# upgrade pip and install wheel in venv
sudo -u pi /home/pi/oprint/bin/pip install --upgrade pip
sudo -u pi /home/pi/oprint/bin/pip install wheel

# install and use wheels of precached heavy duty packages
sudo pip install --no-index --find-links=/wheels/ numpy
sudo -u pi /home/pi/oprint/bin/pip install --no-index --find-links=/wheels/ numpy
sudo -u pi /home/pi/oprint/bin/pip install --no-index --find-links=/wheels/ lxml
sudo -u pi /home/pi/oprint/bin/pip install --no-index --find-links=/wheels/ pillow
sudo rm -rf /wheels

# install Mr Beam Plugin
pushd /home/pi
  gitclone OCTOPI_MRBEAMPLUGIN_REPO MrBeamPlugin
  pushd MrBeamPlugin
    addGitHashToConfig "mrbeamhash"
    sudo -u pi /home/pi/oprint/bin/pip install .
  popd
  rm -rf MrBeamPlugin
popd

# install netconnectd
sudo systemctl disable hostapd.service
sudo systemctl disable dnsmasq.service
sed -i -e "s@#timeout 60;@timeout 60;@g" /etc/dhcp/dhclient.conf
pushd /home/pi
  gitclone OCTOPI_NETCONNECTD_REPO netconnectd
  pushd netconnectd
    addGitHashToConfig "netconnectddaemonhash"
    sudo pip install --process-dependency-links .
    sudo python setup.py install_extras
  popd
  rm -rf netconnectd
popd
sed -i -e "s@allow-hotplug wlan0@#allow-hotplug wlan0@g" /etc/network/interfaces
sed -i -e "s@iface wlan0-raspbian inet manual@#iface wlan0-raspbian inet manual@g" /etc/network/interfaces
sed -i -e "s@    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf@#    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf@g" /etc/network/interfaces
sudo systemctl enable netconnectd.service

# install netconnectd-plugin
pushd /home/pi
  gitclone OCTOPI_NETCONNECTD_PLUGIN_REPO OctoPrint-Netconnectd
  pushd OctoPrint-Netconnectd
    addGitHashToConfig "netconnectdpluginhash"
    sudo -u pi /home/pi/oprint/bin/pip install .
  popd
  rm -rf OctoPrint-Netconnectd
popd

# install findmymrbeam-plugin
pushd /home/pi
  gitclone OCTOPI_FINDMYMRBEAM_PLUGIN_REPO OctoPrint-FindMyOctoPrint
  pushd OctoPrint-FindMyOctoPrint
    addGitHashToConfig "findmymrbeamhash"
    sudo -u pi /home/pi/oprint/bin/pip install .
  popd
  rm -rf OctoPrint-FindMyOctoPrint
popd

# install Mr Beam iobeam
pushd /home/pi
  gitclone OCTOPI_MRBEAMIOBEAM_REPO iobeam
  pushd iobeam
    addGitHashToConfig "iobeamhash"
    sudo pip install .
    sudo python setup.py install_extras
    sudo systemctl enable iobeam.service
  popd
  rm -rf iobeam
popd

# install Mr Beam LED software
pushd /home/pi
  gitclone OCTOPI_MRBEAMLED_REPO mrbeamledstrips
  pushd mrbeamledstrips
    addGitHashToConfig "mrbeamledstripshash"
    sudo pip install .
    sudo python setup.py install_extras
    sudo systemctl enable mrbeam_ledstrips.service
  popd
  rm -rf mrbeamledstrips
popd

# install special avrdude software to allow flashing via serial without DTR pin
pushd /home/pi
    gitclone OCTOPI_SHIELDFLASHER_REPO shield_flasher
    pushd shield_flasher
        sudo cp autoreset /usr/bin/autoreset
        sudo cp avrdude-autoreset /usr/bin/avrdude-autoreset
        sudo mv /usr/bin/avrdude /usr/bin/avrdude-original
        sudo ln -s /usr/bin/avrdude-autoreset /usr/bin/avrdude
    popd
    rm -rf shield_flasher
popd

# install rpi_ws281x manually for Mr Beam LED software spread spectrum changes
pushd /home/pi
    gitclone OCTOPI_RPI_WS281X_REPO rpi_ws281x
    pushd rpi_ws281x
        addGitHashToConfig "rpiws281xhash"
        scons
        pushd python
            python setup.py build
            sudo pip install .
        popd
    popd
popd

# install OpenCV-for-Pi from github
pushd /home/pi
    wget "https://github.com/jabelone/OpenCV-for-Pi/raw/master/latest-OpenCV.deb"
    sudo dpkg -i latest-OpenCV.deb
    cp /usr/local/lib/python2.7/dist-packages/cv2.so /home/pi/oprint/local/lib/python2.7/site-packages/ # copy opencv into venv
    rm latest-OpenCV.deb
popd

# install usb_mount_manager
echo 'ACTION=="add",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",TAG+="systemd",ENV{SYSTEMD_WANTS}="usb_mount_manager_add.service"' >> /lib/udev/rules.d/00-mount_manager.rules
echo 'ACTION=="remove",SUBSYSTEM=="block",KERNEL=="sd*[!0-9]",RUN+="/bin/systemctl start --no-block usb_mount_manager_remove.service"' >> /lib/udev/rules.d/00-mount_manager.rules
sudo ln -s /dev/null /etc/udev/rules.d/00-mount_manager.rules # This disables the udev rules for first boot and will be enabled in th first_boot_script again
pushd /home/pi
    gitclone OCTOPI_USBMOUNTMANAGER_REPO usb_mount_manager
    sudo mv usb_mount_manager/mount_manager /root/
    sudo chmod o+x /root/mount_manager/mount_manager
    rm -rf usb_mount_manager
popd
sudo gpg --import /root/pubkey.asc

# install mb_camera_calibration
pushd /home/pi
    gitclone OCTOPI_MBCAMERACALIBRATION_REPO mb_camera_calibration
    pushd mb_camera_calibration
        addGitHashToConfig "mbcameracalibrationhash"
        sudo -u pi /home/pi/oprint/bin/pip install .
    popd
    rm -rf mb_camera_calibration
popd

# remove sudo git preventer
sudo rm /root/bin/git

# activate ssh
pushd /boot
  touch ssh
popd

# activate i2c
echo "i2c-dev" >> /etc/modules
sed -i -e "s@#dtparam=i2c_arm=on@dtparam=i2c_arm=on,i2c_arm_baudrate=64000@g" /boot/config.txt

# enable hardware serial
echo "dtoverlay=pi3-miniuart-bt" >> /boot/config.txt
echo "enable_uart=1" >> /boot/config.txt
sed -i -e "s@console=serial0,115200 @@g" /boot/cmdline.txt

# add pi user to staff group (needed for write access to /usr/local/lib/python2.7/dist-packages)
sudo usermod -a -G staff pi

# develop stuff
if [ "$BUILD_FLAVOR" == "develop" ]
then
    echo "devel:" >> /home/pi/.octoprint/config.yaml
    echo "  cache:" >> /home/pi/.octoprint/config.yaml
    echo "    enabled: false" >> /home/pi/.octoprint/config.yaml
    echo "  webassets:" >> /home/pi/.octoprint/config.yaml
    echo "    bundle: false" >> /home/pi/.octoprint/config.yaml
    echo "    clean_on_startup: true" >> /home/pi/.octoprint/config.yaml
    echo "    minify: false" >> /home/pi/.octoprint/config.yaml

    echo "loggers:" >> /home/pi/.octoprint/logging.yaml
    echo "  octoprint.plugins.mrbeam:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: DEBUG" >> /home/pi/.octoprint/logging.yaml
    echo "  mrbeam:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: DEBUG" >> /home/pi/.octoprint/logging.yaml
    echo "  ANDYTEST:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: DEBUG" >> /home/pi/.octoprint/logging.yaml
    echo "  ANDYTEST.usersettings:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: INFO" >> /home/pi/.octoprint/logging.yaml
    echo "  octoprint.plugins.mrbeam.led_events:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: ERROR" >> /home/pi/.octoprint/logging.yaml
    echo "  octoprint.plugins.softwareupdate.version_checks:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: DEBUG" >> /home/pi/.octoprint/logging.yaml
    chown pi:pi /home/pi/.octoprint/logging.yaml

    #change default password
    PASS=$(mkpasswd -m sha-512 'MrUn!corn2')
    usermod -p $PASS pi
else
    echo "loggers:" >> /home/pi/.octoprint/logging.yaml
    echo "  octoprint.plugins.softwareupdate.version_checks:" >> /home/pi/.octoprint/logging.yaml
    echo "    level: DEBUG" >> /home/pi/.octoprint/logging.yaml

    #lock the password to only allow login via ssh key
    passwd -l pi
fi

sudo chown pi:pi /home/pi/.octoprint/logging.yaml

ln -s /home/pi/oprint/lib/python2.7/site-packages /home/pi/
ln -s /usr/local/lib/python2.7/dist-packages /home/pi/

# add fake-hwclock cron job
sudo crontab -u root /root/scripts/fake-hwclock_cron_job

# add flavour and datetime to image
if [ $BUILD_FLAVOR = "default" ]; then
    echo "octopi=production $(date)" > /etc/mrbeam
else
    echo "octopi=$BUILD_FLAVOR $(date)" > /etc/mrbeam
fi

# add Variant and Flavour name to image
echo $BUILD_VARIANT > /etc/octopi_variant
echo $BUILD_FLAVOR > /etc/octopi_flavor

#cleanup
apt-get clean
sudo rm /common.sh
